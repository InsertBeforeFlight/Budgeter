import { app, ipcMain } from 'electron';
import MainLoggingModule from "./modules/MainLoggingModule";
import AppReadyBehavior from "./behaviors/app/AppReadyBehavior";
import WindowAllClosedBehavior from "./behaviors/window/WindowAllClosedBehavior";
import AppActivateBehavior from "./behaviors/app/AppActivateBehavior";
import FilePathRequestBehavior from "./behaviors/file/FilePathRequestBehavior";
import HomeDirectoryPathRequestBehavior from "./behaviors/directory/HomeDirectoryPathRequestBehavior";
import FileContentRequestBehavior from "./behaviors/file/FileContentRequestBehavior";
import FileCreationRequestBehavior from "./behaviors/file/FileCreationRequestBehavior";
import FileDeletionRequestBehavior from "./behaviors/file/FileDeletionRequestBehavior";
import DirectoryContentRequestBehavior from "./behaviors/directory/DirectoryContentRequestBehavior";
import SpendeeExportParsingBehavior from "./behaviors/parsing/SpendeeExportParsingBehavior";
import * as constants from "./constants";
import IpcKey from "./models/IpcKey";
import IpcStatus from "./models/IpcStatus";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

MainLoggingModule.logInfo("Index", `Webpack Index Entry Point: ${MAIN_WINDOW_WEBPACK_ENTRY}`);
MainLoggingModule.logInfo("Index", `Webpack Preload Entry Point: ${MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY}`);

app.on(constants.APP_READY_EVENT, () => AppReadyBehavior(MAIN_WINDOW_WEBPACK_ENTRY, MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY));
app.on(constants.APP_ACTIVATE, () => AppActivateBehavior(MAIN_WINDOW_WEBPACK_ENTRY, MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY))
app.on(constants.APP_WINDOW_ALL_CLOSED, () => WindowAllClosedBehavior());

// TODO: Can this be integrated into MainIcpModule
ipcMain.on(constants.IPC_PROMPT_FILE_PATH_REQUEST, (_, request) => FilePathRequestBehavior(request));
ipcMain.on(constants.IPC_HOME_DIRECTORY_PATH_REQUEST, () => HomeDirectoryPathRequestBehavior())
ipcMain.on(constants.IPC_FILE_CONTENT_REQUEST, (_, request) => FileContentRequestBehavior(request));
ipcMain.on(constants.IPC_FILE_CREATION_REQUEST, (_, request) => FileCreationRequestBehavior(request));
ipcMain.on(`${IpcKey.FILE_DELETION}:${IpcStatus.REQUEST}`, (_, request) => FileDeletionRequestBehavior(request));
ipcMain.on(constants.IPC_DIRECTORY_CONTENT_REQUEST, (_, request) => DirectoryContentRequestBehavior(request));
ipcMain.on(`${IpcKey.SPENDEE_EXPORT_PARSING}:${IpcStatus.REQUEST}`, (_, request) => SpendeeExportParsingBehavior(request));

MainLoggingModule.logInfo("Index", "IPC Listeners Attached");